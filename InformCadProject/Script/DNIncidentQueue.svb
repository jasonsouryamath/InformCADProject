
'USEUNIT LogicalObjects
'USEUNIT PropertyHolderLibrary
'USEUNIT GeneralFunctions
'USEUNIT DNCommonFunctions
'USEUNIT UtilityFunctions
'USEUNIT DNUnitQueue
'USEUNIT DataBaseRelatedFunctions
'USEUNIT CommonFunctions

'to check incident is ion [pedning or assigned state
Function VerifyInicdentStatusInIncidentQueue(byval incidentId, byval expectedStatus)
    Delay(10000)
  flag = 0 
  VerifyInicdentStatusInIncidentQueue =null
  if Aliases.WpfProcess.DNIncidentQueue.exists Then    
      Aliases.WpfProcess.DNIncidentQueue.activate  
      

      set gridObject = getobject1("IncidentQueueGrid")     
      intRcount=gridObject.wRowCount

      
       For i=0 To intRcount-1  
         If  cint(gridObject.ViewableRecords.Item(i).DataItem.ShortcutID.OleValue)=cint(incidentId) Then
             flag = 1
             VerifyInicdentStatusInIncidentQueue = "Pending" 
             If(gridObject.ViewableRecords.Item(i).DataItem.QueueIncidentObject.IsIncidentAssigned = True) Then
                VerifyInicdentStatusInIncidentQueue = "Assigned"
             End If
            call fncompareValues( VerifyInicdentStatusInIncidentQueue, expectedStatus, "Incident Status for Id ["&incidentId&"]","string")  
            exit for
         End if 
      next
  else 
    call FnRecordResults ("Incident Queue window not Found", "Fail","")   
  end if  
 if flag = 0 then
    call FnRecordResults ("Records not found in Incident Queue window to verify the status", "Fail","")  
 end If 

End Function

Function DoubleClickonInc

If Aliases.WpfProcess.DNIncidentQueue.exists Then    
      Aliases.WpfProcess.DNIncidentQueue.activate 
      set pty = Project.Variables.PropertyHolder
      set incboxobj = Aliases.WpfProcess.DNIncidentQueue.FindChild(pty.IncidentQBoxPty,pty.IncidentQBoxPtyVal,30,true)
      'call incboxobj.SetFocus
      call incboxobj.DblClick()
       Call WaitTillObjExists(6000,Aliases.WpfProcess.UctForm)
       Aliases.WpfProcess.UctForm.Maximize
End If
End Function 

' Function Name: DoubleClickonIncidentinIncidentQueue
' Parameters : IncidentID.CompletedID
' Details/Define :double clicks on an incident checks if it is opened in incident viewer
' Author Name with Date: Parikshith
Function DoubleClickonIncidentinIncidentQueue(byVal IncidentID,byVal CompleteID)

   If Aliases.WpfProcess.DNIncidentQueue.exists Then    
      Aliases.WpfProcess.DNIncidentQueue.activate 
      
      'call BringRecordToFrontInGrid( "incidentqueue" ,IncidentID)
     
      IncidentCellObj = GetObjectAsString("IncidentIDCellInInicdentQueueDynamicString")
      set IncidentCellObj  = eval( replace(IncidentCellObj, "VarNumber", IncidentID))
      
      If IncidentCellObj.exists then      
          IncidentCellObj.DblClick()
              
        else
        call FnRecordResults("Inicident ["&IncidentID&"] not found in the grid", "Fail", "")  
      End if
      
    Else 
      call FnRecordResults ("Incident Queue window not Found", "Fail","")   
   End if
   set IncidentCellObj = nothing
End Function

' Function Name: CollapseOrExpandInIncidentQueue
' Parameters : IncidentID
' Details/Define :collapse or expand incident details in incident queue
' Author Name with Date: Parikshith
Function CollapseOrExpandInIncidentQueue(byval IncidentID, byval ExpandOrCollapse)
    incidentrownumber = GetIncidentRowIdInIncidentQueue(IncidentID)
    if IsNull ( incidentrownumber) then
        call FnRecordResults("Incident not found in the Incidents Queue, not able to collapse" ,"Fail", "")
        exit function
    end if 
    
    objIncidentRow =GetObjectAsString("IncidentRowExpandDynmaicString")
   Set objIncidentRow  = eval(replace(objIncidentRow, "VarNumber", incidentrownumber+1))
   
    If objIncidentRow.Exists = True Then
      If objIncidentRow.IsExpanded = True and lcase(ExpandOrCollapse) = "expand" Then
        call FnRecordResults("Incident - " & IncidentId & " is already expanded" ,"Pass", "")
        'Expanded - Do Nothing
      ElseIf objIncidentRow.IsExpanded = false and lcase(ExpandOrCollapse) = "expand" Then
        'expand
        objIncidentRow.set_IsExpanded(True)
        call FnRecordResults("Incident - " & IncidentId & " is  expanded" ,"Pass", "")
      ElseIF objIncidentRow.IsExpanded = true and lcase(ExpandOrCollapse) <> "expand" Then
        'collapse
        objIncidentRow.set_IsExpanded(False)
        call FnRecordResults("Incident - " & IncidentId & " is  collapsed" ,"Pass", "")
      ElseIF objIncidentRow.IsExpanded = false and lcase(ExpandOrCollapse) <> "expand" Then
        'Collapsed - Do Nothing
        call FnRecordResults("Incident - " & IncidentId & " is already collapsed" ,"Pass", "")
      End IF
    Else 
      call FnRecordResults("Incident not found in the Incident Queue" ,"Fail", "")
    End If  
        
     set objIncidentRow  = Nothing 
    
End Function

' Function Name: GetIncidentRowIdInIncidentQueue
' Parameters : IncidentID
' Details/Define :gets row id of a particular incident
' Author Name with Date: Parikshith
Function GetIncidentRowIdInIncidentQueue(byval IncidentID )
 GetIncidentRowIdInIncidentQueue =null
 Aliases.WpfProcess.DNIncidentQueue.activate
 Aliases.WpfProcess.DNIncidentQueue.SetFocus
 
     set objIncidentGridQ = GetGridObj("incidentqueue")
    if objIncidentGridQ is nothing Then
      call FnRecordResults ("Unable to generate incident grid object","Fail","")
      exit function 
    End IF 
     
      intRowcount = objIncidentGridQ.wRowCount
      intColumnCount = objIncidentGridQ.wColumnCount
      
      ' get row index
      For intColn = 1 To intColumnCount-1
         strColumnName = objIncidentGridQ.wColumn(intColn)
         If strColumnName = "ID" Then
            strColumnIncidentIDIndex = intColn                                    
         End If  
         If strColumnName = "Incident Number" Then
            strColumnIncidentNumberIndex = intColn                        
         End If       
      Next
     For intRow = 0 To intRowcount-1
     
        If Not(len(IncidentID)) > 3 Then
            If Lcase(objIncidentGridQ.Wvalue(intRow,strColumnIncidentIDIndex))= Lcase(IncidentID) Then
              GetIncidentRowIdInIncidentQueue = intRow
              Exit For
            End If  
        Else          
            If Lcase(objIncidentGridQ.Wvalue(intRow,strColumnIncidentNumberIndex))= Lcase(IncidentID) Then
              GetIncidentRowIdInIncidentQueue = intRow
              Exit For
             End If 
        End If
         
      Next       
   
  set objIncidentGridQ = nothing
end function


' Function Name: VerifyUnitsTabDetailsInIncidentQueue
' Parameters : IncidentID,UnitId,UnitStatus,UnitLocation,TimeElapsed
' Details/Define :verifies details in Units Tab of a given incident
' Author Name with Date: Parikshith

Function VerifyUnitsTabDetailsInIncidentQueue(byVal IncidentID,byVal UnitID,byVal UnitStatus,byVal UnitLocation,byVal TimeElapsedOrUnitPresenceAbsence)
   If Aliases.WpfProcess.DNIncidentQueue.exists Then    
      Aliases.WpfProcess.DNIncidentQueue.activate 
       Call MinMaxOrRestoreObjects("IncidentQueueWnd","Maximize")   
'       if incidentRowObj.IsExpanded = False then
'          call CollapseOrExpandInIncidentQueue(IncidentID)
'        End if
    CollapseAllUnitsOrIncidents("IncidentQueue")
      Call CollapseOrExpandInIncidentQueue(IncidentID,"expand")
        
       incidentrownumber = GetIncidentRowIdInIncidentQueue(IncidentID)   
       '   a = GetObjectAsString("IncidentQueueUnitTabHeaderObj")
          if IsNull ( incidentrownumber) then
            call FnRecordResults("Incident not found in the Incidents Queue, not able to collapse and find the unit tab" ,"Fail", "")
            exit function
         end if 
         
         Set UnitTabObj = GetLogicalObject("IncidentQueueUnitTabObj")
         
         UnitTabObj.Click()
         Delay(2000)
         
          set UnitGridObj = GetLogicalObject("IncidentQueueUnitTabGridObj")
   
          IDcount = UnitGridObj.wItemCount
          flag = 0
          for k=0 to IDcount-1
            'if trim(UnitGridObj.Items.Item(k).UnitAlias.OleValue) = trim(UnitID) Then
			    if trim(lcase(UnitGridObj.Items.Item(k).UnitForIncidentQueue.UnitCode.OleValue)) = trim(lcase(UnitID)) Then
               call FnRecordResults("Unit " &UnitID& " assigned to Incident " &IncidentID& " found in Incident Queue" ,"Pass", "")          
               flag = 1
               exit for
            end if
          next
             
          If flag = 1 Then        
                    'Verify Unit Status
                    If len(UnitStatus)> 0 then
                       ActualValue = UnitGridObj.Items.Item(k).UnitForIncidentQueue.AssignmentStatusName.OleValue
                       
                        if instr(1, trim(lcase(ActualValue)), trim(lcase(UnitStatus))) > 0 then
                            call fnrecordresults ("Expected value [" &UnitStatus& "] is matching with actual ["&ActualValue&"]", "pass","")
                        else 
                            call fnrecordresults ("Expected value [" &UnitStatus& "] is not matching with actual ["&ActualValue&"]", "fail","")
                        end if
                     End If
                             
                    If len(UnitLocation)> 0 then
                       ActualValue = UnitGridObj.Items.Item(k).UnitForIncidentQueue.Location.OleValue
                       
                        if instr(1, trim(lcase(ActualValue)), trim(lcase(UnitLocationStatus))) > 0 then
                            call fnrecordresults ("Expected value" &UnitStatus& "] is matching with actual ["&ActualValue&"]", "pass","")
                        else 
                            call fnrecordresults ("Expected value" &UnitStatus& "] is not matching with actual ["&ActualValue&"]", "fail","")
                        end if
                    End If
                        
                    If len(UnitID)> 0 then
                       ActualValue = UnitGridObj.Items.Item(k).UnitForIncidentQueue.UnitCode.OleValue
                       
                        if trim(lcase(ActualValue)) = trim(lcase(UnitID)) then
                            call fnrecordresults ("Expected value" &UnitStatus& "] is  matching with actual ["&ActualValue&"]", "pass","")
                        else 
                            call fnrecordresults ("Expected value" &UnitStatus& "] is not matching with actual ["&ActualValue&"]", "fail","")
                        end if
                     End If
                     
                      If len(TimeElapsedOrUnitPresenceAbsence)> 0 then
                       ActualValue = UnitGridObj.Items.Item(k).UnitForIncidentQueue.ElapsedTimeBaseTime.OleValue
                        if len(ActualValue) > 0 then
                            call fnrecordresults ("Elapsed Time is Present -" & ActualValue, "pass","")
                        else 
                            call fnrecordresults ("Elapsed Time is not present - " & ActualValue, "fail","")
                        end if
                      End If                   
        ElseIf flag = 0 Then     
             If( flag = 1 and lcase(TimeElapsedOrUnitPresenceAbsence)= "absent") Then  
                call FnRecordResults (UnitID& " UnitID Found in the Unit Tab of Incident" &IncidentID&"Which is unexpected", "Fail","")
            ElseIf ( flag = 0 and lcase(TimeElapsedOrUnitPresenceAbsence)= "absent") Then
              call FnRecordResults (UnitID& " UnitID Not Found in the Unit Tab of Incident [" &IncidentID& "] As Expected", "Pass","")
            Else
             call FnRecordResults("Unit " &UnitID& " is Found in Unit Tab of Incident " &IncidentID,"Fail", "")
      End If 
          
           
        End IF     
  End If        
End Function


' Function Name: verifyRClickMenuItemofUnitsInIncidentQueue
' Parameters : UnitId,ButtonName
' Details/Define : Right click on unit in units tab of incident and verifys the button exists or not 
'depending on the parameter ButtonExists verifys that should be present or not
'parameter ButtonExists accepts True /false 
'
' Author Name with Date: darshan 18/02/2014
Sub verifyRClickMenuItemofUnitsInIncidentQueue(byval UnitId,byval ButtonName, byval ButtonExists)
    If Aliases.WpfProcess.DNIncidentQueue.Exists Then    
          Aliases.WpfProcess.DNIncidentQueue.Activate    
          incidentrownumber = GetIncidentRowIdInIncidentQueue(IncidentID)   
          a = GetObjectAsString("IncidentQueueUnitTabHeaderObj")
          if IsNull ( incidentrownumber) then
            call FnRecordResults("Incident not found in the Incidents Queue, not able to collapse and find the unit tab" ,"Fail", "")
            exit sub
         end if 
         
          a  = replace(a, "VarNumber", incidentrownumber+1)
          set UnitsHeaderObj = eval(a)
          UnitsHeaderObj.Click()   
          UnitsHeaderObj.Click()  
                 
          Set UnitsTabObj = GetObject1("IncidentQueueUnitsTabObj")
          Call WaittillPropertyChange(UnitsTabObj,"Exists","True",4000)        
          ItemCount = UnitsTabObj.wItemCount 'unitsTabObj.wItemCount        
          Dim Index
          UnitExists = False
          If ItemCount > 0 Then
              For Index = 0 to ItemCount-1                                                                      
                 If Trim(lcase(UnitsTabObj.Items.Item(Index).UnitCode.OleValue)) = Trim(lcase(UnitId)) Then                                                         
                    UnitExists = True
                    Exit For
                 End If            
              Next
          Else
            Call FnRecordResults("No units found in units tab of incident", "Fail","")
            Set UnitsHeaderObj = Nothing
            Set UnitsTabObj = Nothing
            Exit Sub          
          End if
          If UnitExists Then
             PVal = "WPFObject(" & chr(34) & "GridViewCell" & chr(34) & "," & chr(34) & UnitId & chr(34) & "," & 1 & ")"
             Set CellObj = UnitsTabObj.FindChild("Name",PVal,2,True)
             CellObj.Click
             CellObj.Click
             Set PopupObj = GetObject1("UnitQueueContextMenuInIncidentsQueue")          
             PropertyArr = Array("ClrClassName","WPFControlText")
             PropertyValuesArr = Array("TextBlock",ButtonName)
             If PopupObj.Exists Then
               
                   Set ButtonObj = PopupObj.FindChild(PropertyArr,PropertyValuesArr,10,True)
                    'Updated with case stment - Thara
                    'If ButtonExists = True then 
                     If lcase(ButtonExists) = lcase(True) then           
                     'if Obj.exists then   
                      if ButtonObj.exists then              
                           call FnRecordResults("Button [" & ButtonName & "] found", "Pass", "")
                     else
                           call FnRecordResults("Button [" & ButtonName & "] not found", "Fail", "")  
                     end if 
                   End If
               
                   If lcase(ButtonExists) = lcase(False) then             
                     if not ButtonObj.exists then                  
                           call FnRecordResults("Button [" & ButtonName & "] is not found", "Pass", "")
                     else
                           call FnRecordResults("Button [" & ButtonName & "]  found", "Fail", "")  
                     end if 
                   End If                
                 
               
             Else
               Call FnRecordResults ("Object [UnitQueueContextMenuInIncidentsQueue] not found", "Fail","")   
             End If           
          Else
             Call FnRecordResults("Unit [" & UnitId & "] not found in units tab of incident", "Fail","")
             Set UnitsHeaderObj = Nothing
             Set UnitsTabObj = Nothing
             Exit Sub
          End If      
    Else       
        Call FnRecordResults("Incident Queue window not Found", "Fail","")   
    End If
    Set UnitsHeaderObj = Nothing
    Set unitsTabObj = Nothing
    Set PopupObj = Nothing
    Set CellObj = Nothing
 


End  Sub


' Function Name: RightClickOnUnitInIncidentQueueAndClickButton
' Parameters : UnitId,ButtonName
' Details/Define : Right click on unit in units tab of incident and click button
' Author Name with Date: Venkat 18/02/2014
Function ClickOnUnitInIncidentQueueAndClickButton(byval UnitId,byval ButtonName,byval IncidentID)
    If Aliases.WpfProcess.DNIncidentQueue.Exists Then    
          Aliases.WpfProcess.DNIncidentQueue.Activate 
      
       'Call CollapseAllUnitsOrIncidents("incidentqueue")
       IncidentRow =  GetIncidentRowIdInIncidentQueue (IncidentID) 
       call CollapseOrExpandInIncidentQueue (IncidentID, "expand")
       'set IncidentGridObj = GetGridObj("incidentqueue") 
       'IncidentGridObj.ScrollIndexIntoView(IncidentRow)         
        Set UnitGridObj = GetLogicalObject("UnitHeaderTabInIncidentQueue")
           UnitGridObj.Click()
           unitsassigned = Aliases.WpfProcess.DNIncidentQueue.WPFObject("windowInfragisticsIncidentQueue").FindChild("Name","WPFObject(*igDataGridMain*)",15,True).FindAllChildren("ClrClassName","ListBoxItem",15,True)
           totalunitsinlist  = ubound(unitsassigned)
            'Set GridObj = GetLogicalObject("IncidentMoreBtnClick")
            
           Flag=0
           For intUnit = 0 TO totalunitsinlist
                IncidentUnitCellObj = GetObjectAsString("UnitListInIncidentQueueDynamicStr")
              set IncidentUnitCellObj  = eval( replace(IncidentUnitCellObj, "VarNumber", intUnit+1))
              If IncidentUnitCellObj.Content.UnitAlias.OleValue = UnitId Then
                  IncidentUnitCellObj.Click()
                  Flag=1
                  Exit For
              End If
           Next
           
           If Flag=0 Then
             Call FnRecordResults("Unit [" & UnitId & "] not found in units tab of incident", "Fail","")
             Set IncidentUnitCellObj = Nothing
             Set UnitGridObj = Nothing
             Exit Function
           End If 
            IncidentUnitBtnObj = GetObjectAsString("UnitButnInIncidentQueueDynamicStr")
            set IncidentUnitBtnObj  = eval( replace(IncidentUnitBtnObj, "VarButton", ButtonName))
            IncidentUnitBtnObj.Click()          
       Else       
        Call FnRecordResults("Incident Queue window not Found", "Fail","") 
        Set IncidentUnitCellObj = Nothing
        set IncidentUnitBtnObj = Nothing
        Set UnitGridObj = Nothing  
    End If    
        
End Function

' Function Name: RightClickOnIncidentAndSelectItem
' Parameters : Incident ID,ButtonName
' Details/Define : In incident queue, right clicks on an incident ID and selects an item from the context menu
' Author Name with Date: Parikshith 12/03/2014

sub RightClickOnIncidentAndSelectItemInIncidentQueue(byVal IncidentID,byVal ButtonName)

   'If Aliases.WpfProcess.InfragisticsUnitQueue.exists Then    
         ' Aliases.WpfProcess.InfragisticsUnitQueuee.activate 
      
          'call BringRecordToFrontInGrid( "IncidentQueueGrid" ,IncidentID)
     
          IncidentCellObj = GetObjectAsString("IncidentIDCellInInicdentQueueDynamicString")
          set IncidentCellObj  = eval( replace(IncidentCellObj, "VarNumber", IncidentID))
      
          If IncidentCellObj.exists then      
                IncidentCellObj.ClickR()
                IncidentCellObj.ClickR()
          
                Set PopupObj = GetObject1("IncidentQueueContextMenu")          
                PropertyArr = Array("ClrClassName","Header")
                PropertyValuesArr = Array("XamMenuItem","*" &ButtonName)
                If PopupObj.Exists Then
                     Set ButtonObj = PopupObj.FindChild(PropertyArr,PropertyValuesArr,15,True)
                     If ButtonObj.Exists Then
                        ButtonObj.Click
                     Else
                        Call FnRecordResults ("Button [" & ButtonName & "] not found", "Fail","")
                     End If
                Else
                   Call FnRecordResults ("Object [" & IncidentQueueContextMenu & "] not found", "Fail","")   
                End If           
            else
              call FnRecordResults("Inicident ["&IncidentID&"] not found in the grid", "Fail", "")  
          End if
    ' Else 
     '    call FnRecordResults ("Incident Queue window not Found", "Fail","")   
   'End if      
end sub

sub zzz
 call DNEventHandler.GeneralEvents_OnStartTest("ExecuteTestCases")
Set project.Variables.Results = CaptureTestResultHelperClass()
call VerifyIncidentDetailsInIncidentQueue("916", "", "", "", "", "Priority Description", "Level 1 Medical", "present")

end sub
'gets the details of an incident in incident queue
'IncidentID - mandatory
'MasterIncidentID,Address,IncidentStatus,Agency -  pass corresponding values to be verified through these parameters
'parameters Detail1 is dynamic, can be used in the code as per the requirement - column name should be passed through this parameter
'CompareValue is associated with parameters Detail1 - the value to be verified should be passed through this parameter
'ExistenceCheck- mandatory - 'Present' to check for presence, 'Absent' to check for absence
'Not all verifications are implemented in the function, modify as per the requirement without affecting the old code
'Parikshith 18/3/2014
sub VerifyIncidentDetailsInIncidentQueue(byVal IncidentID,byVal MasterIncidentID,byVal Address,byVal IncidentStatus,byVal Agency,byVal Detail1,byVal CompareValue,byVal ExistenceCheck)
   Delay(6000)
    'call BringRecordToFrontInGrid("incidentqueue",IncidentID)
    Dim IncidentDetailsDictObj1
    set IncidentDetailsDictObj1 = CreateObject("scripting.dictionary")
    set IncidentDetailsDictObj1 = GetIncidentRowDetails(IncidentID)
    
    
    
    if len(Address) > 0 Then
          call fncompareValues(IncidentDetailsDictObj1.item("Address"), Address, "Incident Address", "instring")      
    end if 
    
    if len(MasterIncidentID) > 0 Then
          call fncompareValues(IncidentDetailsDictObj1.item("MasterIncNumber"), MasterIncidentID, "Master Incident Number", "string")      
    end if
    
    if len(IncidentStatus) > 0 Then
          call fncompareValues(IncidentDetailsDictObj1.item("IncidentState"), IncidentStatus, "Incident Status", "string")      
    end if
    
    if len(Agency) > 0 Then
          call fncompareValues(IncidentDetailsDictObj1.item("Agency"), Agency, "Agency", "string")      
    end if
    
    if len(Detail1) > 0 Then
    
       if lcase(detail1) = "other agency units" then
         actualval = IncidentDetailsDictObj1.item("OtherAgencyUnits")
         CompareValueArray = Split(CompareValue, ",")
         
         OtherAgencyunitlistarray = split (actualval, " ")
         
         found = 0 
         for j=0 to ubound(CompareValueArray) 
              for k= 0 to ubound(OtherAgencyunitlistarray)
               if  trim(lcase(OtherAgencyunitlistarray(k)))= lcase(trim(CompareValueArray(j)))   then
                    found = 1
                    exit for 
               end if 
              next 
               if lcase(ExistenceCheck) = "present" and found = 1  then
                   call fnrecordresults ("Other Agency Unit is found in the list as expected", "pass","")  
               elseif lcase(ExistenceCheck) = "absent" and found = 1 then
                       call fnrecordresults ("Actual value ["&actualval&"]is found  which is unexpected ", "Fail","")
               elseif lcase(ExistenceCheck) = "present" and found = 0  then
                   call fnrecordresults ("Other Agency Unit  "&CompareValue&" is not found in the list which is unexpected ", "Fail","")     
               elseif lcase(ExistenceCheck) = "absent" and found = 0 then              
                      call fnrecordresults ("Other Agency Unit "&CompareValue&" is not found in the list as expected", "pass","")
               end if
               found = 0            
         next 
           
      end if  
       
       if lcase(detail1) = "apartment" then
           actualval = IncidentDetailsDictObj1.item("Apartment")
           if lcase(ExistenceCheck) = "present" then
               call fncompareValues(actualval, CompareValue, "Apartment", "instring")     
            elseif lcase(ExistenceCheck) = "absent" then
               if not instr(1, trim(actualval), trim(CompareValue)) > 0  then
                 call fnrecordresults ("Apartment ["&CompareValue&"]is not found in the list as expected", "pass","")
                else
                 call fnrecordresults ("Actual value ["&actualval&"]is found which is unexpected ", "Fail","")               
               end if
           end if
       end if
       
       if lcase(detail1) = "incidenttime" then
          actualval = IncidentDetailsDictObj1.item("IncidentTime")
          'resval = aqDateTime.Compare(actualval, CompareValue)      
          if instr(1, trim(actualval), trim(CompareValue)) > 0 then
             call fnrecordresults ("Expected Date/Time [" &CompareValue& "] is matching with actual ["&actualval&"]", "pass","")
             else 
             call fnrecordresults ("Expected Date/Time [" &CompareValue& "] is not matching with actual ["&actualval&"]", "fail","")
          end if
       end if
       
        if lcase(detail1) = "assigned units" then
        
          CompareValue = GetUnitAlias(CompareValue) 'assigned units column in incident queue is populating the unit alais 
           actualval = IncidentDetailsDictObj1.item("AssignedUnits")
           Assignedunitlistarray = split (actualval, " ")
           found = 0 
           for k= 0 to ubound(Assignedunitlistarray)
               if  trim(lcase(Assignedunitlistarray(k)))= lcase(trim(CompareValue))   then
                    found = 1
                    exit for 
               end if 
           
           next 
           if lcase(ExistenceCheck) = "present" and found = 1  then
               call fnrecordresults ("Assigned Unit is found in the list as expected", "pass","")  
           elseif lcase(ExistenceCheck) = "absent" and found = 1 then
                   call fnrecordresults ("Actual value ["&actualval&"]is found  which is unexpected ", "Fail","")
           elseif lcase(ExistenceCheck) = "present" and found = 0  then
               call fnrecordresults ("Assigned Unit  "&CompareValue&" is not found in the list which is unexpected ", "Fail","")     
            elseif lcase(ExistenceCheck) = "absent" and found = 0 then              
                  call fnrecordresults ("Assigned Unit "&CompareValue&" is not found in the list as expected", "pass","")
           end if
        
         end if  
       
       
         if lcase(detail1) = "stacked units" then
          if len(CompareValue) > 0 then 
            CompareValue = GetUnitAlias(CompareValue)
          End if
           actualval = IncidentDetailsDictObj1.item("StackedUnit")
           
           if lcase(ExistenceCheck) = "present" then
               call fncompareValues(actualval, CompareValue, "Stacked Unit", "instring")     
            elseif lcase(ExistenceCheck) = "absent" then
               if not instr(1, trim(actualval), trim(CompareValue)) > 0  then
                 call fnrecordresults ("Stacked unit ["&CompareValue&"]is found in the list as expected", "pass","")
                else
                 call fnrecordresults ("Stacked unit value ["&actualval&"]is Not matching  which is unexpected ", "Fail","")               
               end if
           end if
       end if
    end if 
    
      if lcase(detail1) = "alertimage" then
           actualval = IncidentDetailsDictObj1.item("Alerts")
           if lcase(ExistenceCheck) = "present" then
               call fncompareValues(actualval, CompareValue, "Alert Image", "instring")     
            elseif lcase(ExistenceCheck) = "absent" then
               if not instr(1, trim(actualval), trim(CompareValue)) > 0  then
                 call fnrecordresults ("Alert Image Icon ["&CompareValue&"]is not found in the list as expected", "pass","")
                else
                 call fnrecordresults ("Alert Image  ["&actualval&"]is found which is unexpected ", "Fail","")               
               end if
           end if
       end if 
       
       if lcase(detail1) = "flagimage" then
           'actualval = IncidentDetailsDictObj1.item("flagimage")
           actualval = IncidentDetailsDictObj1.item("Late")
           
           if lcase(ExistenceCheck) = "present" then
                CompareValue = True
               call fncompareValues(actualval, CompareValue, "Late Flag", "instring")     
            elseif lcase(ExistenceCheck) = "absent" then
                CompareValue = False
               if not instr(1, trim(actualval), trim(CompareValue)) > 0  then
                 call fnrecordresults ("Late flag Image Icon ["&CompareValue&"]is not found in the list as expected", "pass","")
                else
                 call fnrecordresults ("Late flag Image  ["&actualval&"]is found which is unexpected ", "Fail","")               
               end if
           end if
       end if 
       
       if detail1 = "udf17" then
           actualval = IncidentDetailsDictObj1.item("UDF17")
           if lcase(ExistenceCheck) = "present" then
               call fncompareValues(actualval, CompareValue, "UDF17 value", "instring")     
            elseif lcase(ExistenceCheck) = "absent" then
               if not instr(1, trim(actualval), trim(CompareValue)) > 0  then
                 call fnrecordresults ("UDF 17 vale: ["&CompareValue&"]is not found in the list as expected", "pass","")
                else
                 call fnrecordresults ("UDF 17 vale:  ["&actualval&"]is found which is unexpected ", "Fail","")               
               end if
           end if
       end if 
       
       if detail1 = "udf18" then
           actualval = IncidentDetailsDictObj1.item("UDF18")
           if lcase(ExistenceCheck) = "present" then
               call fncompareValues(actualval, CompareValue, "UDF18 value", "instring")     
            elseif lcase(ExistenceCheck) = "absent" then
               if not instr(1, trim(actualval), trim(CompareValue)) > 0  then
                 call fnrecordresults ("UDF 18 vale: ["&CompareValue&"]is not found in the list as expected", "pass","")
                else
                 call fnrecordresults ("UDF 18 vale:  ["&actualval&"]is found which is unexpected ", "Fail","")               
               end if
           end if
       end if 
       
       if detail1 = "udf19" then
           actualval = IncidentDetailsDictObj1.item("UDF19")
           if lcase(ExistenceCheck) = "present" then
               call fncompareValues(actualval, CompareValue, "UDF19 value", "instring")     
            elseif lcase(ExistenceCheck) = "absent" then
               if not instr(1, trim(actualval), trim(CompareValue)) > 0  then
                 call fnrecordresults ("UDF 19 vale: ["&CompareValue&"]is not found in the list as expected", "pass","")
                else
                 call fnrecordresults ("UDF 19 vale:  ["&actualval&"]is found which is unexpected ", "Fail","")               
               end if
           end if
       end if
       
       if detail1 = "udf20" then
           actualval = IncidentDetailsDictObj1.item("UDF20")
           if lcase(ExistenceCheck) = "present" then
               call fncompareValues(actualval, CompareValue, "UDF20 value", "instring")     
            elseif lcase(ExistenceCheck) = "absent" then
               if not instr(1, trim(actualval), trim(CompareValue)) > 0  then
                 call fnrecordresults ("UDF 20 vale: ["&CompareValue&"]is not found in the list as expected", "pass","")
                else
                 call fnrecordresults ("UDF 20 vale:  ["&actualval&"]is found which is unexpected ", "Fail","")               
               end if
           end if
       end if
       
       if detail1 = "sector" then
           actualval = IncidentDetailsDictObj1.item("Sector")
           if lcase(ExistenceCheck) = "present" then
               call fncompareValues(actualval, CompareValue, "Sector: ", "instring")     
            elseif lcase(ExistenceCheck) = "absent" then
               if not instr(1, trim(actualval), trim(CompareValue)) > 0  then
                 call fnrecordresults ("Sector: ["&CompareValue&"]is not found as expected", "pass","")
                else
                 call fnrecordresults ("Sectore  ["&actualval&"]is found which is unexpected ", "Fail","")               
               end if
           end if
       end if
       
       if detail1 = "division" then
           actualval = IncidentDetailsDictObj1.item("Division")
           if lcase(ExistenceCheck) = "present" then
               call fncompareValues(actualval, CompareValue, "Division: ", "instring")     
            elseif lcase(ExistenceCheck) = "absent" then
               if not instr(1, trim(actualval), trim(CompareValue)) > 0  then
                 call fnrecordresults ("Division: ["&CompareValue&"]is not found as expected", "pass","")
                else
                 call fnrecordresults ("Division:  ["&actualval&"]is found which is unexpected ", "Fail","")               
               end if
           end if
       end if
       
       if detail1 = "Priority Description" then
           actualval = IncidentDetailsDictObj1.item("PriorityDescription")
           if lcase(ExistenceCheck) = "present" then
               call fncompareValues(actualval, CompareValue, "Priority Description: ", "instring")     
            elseif lcase(ExistenceCheck) = "absent" then
               if not instr(1, trim(actualval), trim(CompareValue)) > 0  then
                 call fnrecordresults ("Priority Description: ["&CompareValue&"]is not found as expected", "pass","")
                else
                 call fnrecordresults ("Priority Description:  ["&actualval&"]is found which is unexpected ", "Fail","")               
               end if
           end if
       end if
       
       if detail1 = "Incident Type" then
           actualval = IncidentDetailsDictObj1.item("IncidentType")
           if lcase(ExistenceCheck) = "present" then
               call fncompareValues(actualval, CompareValue, "IncidentTypeName: ", "instring")     
            elseif lcase(ExistenceCheck) = "absent" then
               if not instr(1, trim(actualval), trim(CompareValue)) > 0  then
                 call fnrecordresults ("Incident Type: ["&CompareValue&"]is not found as expected", "pass","")
                else
                 call fnrecordresults ("Incident Type:  ["&actualval&"]is found which is unexpected ", "Fail","")               
               end if
           end if
       end if
       
           if detail1 = "ProblemNature" then
           actualval = IncidentDetailsDictObj1.item("ProblemNature")
           if lcase(ExistenceCheck) = "present" then
               call fncompareValues(actualval, CompareValue, "Problem Nature", "instring")     
            elseif lcase(ExistenceCheck) = "absent" then
               if not instr(1, trim(actualval), trim(CompareValue)) > 0  then
                 call fnrecordresults ("Problem Nature: ["&CompareValue&"]is not found in the list as expected", "pass","")
                else
                 call fnrecordresults ("Problem Nature:  ["&actualval&"]is found which is unexpected ", "Fail","")               
               end if
           end if
       end if
       
       
          if detail1 = "Location" then
           actualval = IncidentDetailsDictObj1.item("Location")
           if lcase(ExistenceCheck) = "present" then
               call fncompareValues(actualval, CompareValue, "Location", "instring")     
            elseif lcase(ExistenceCheck) = "absent" then
               if not instr(1, trim(actualval), trim(CompareValue)) > 0  then
                 call fnrecordresults ("Location: ["&CompareValue&"]is not found in the list as expected", "pass","")
                else
                 call fnrecordresults ("Location:  ["&actualval&"]is found which is unexpected ", "Fail","")               
               end if
           end if
       end if
       
          if detail1 = "IsIncidentAssigned" then
           actualval = IncidentDetailsDictObj1.item("Assigned")
           if lcase(ExistenceCheck) = "present" then
               call fncompareValues(actualval, CompareValue, "Is Incident Assigned", "instring")     
            elseif lcase(ExistenceCheck) = "absent" then
               if not instr(1, trim(actualval), trim(CompareValue)) > 0  then
                 call fnrecordresults ("Is Incident Assigned: ["&CompareValue&"]is not found in the list as expected", "pass","")
                else
                 call fnrecordresults ("Is Incident Assigned:  ["&actualval&"]is found which is unexpected ", "Fail","")               
               end if
           end if
       end if
       
        if detail1 = "OtherAgencyIncidents" then
           actualval = IncidentDetailsDictObj1.item("OtherAgencyIncidents")
           if lcase(ExistenceCheck) = "present" then
               call fncompareValues(actualval, CompareValue, "Other Agency Incidents", "instring")     
            elseif lcase(ExistenceCheck) = "absent" then
               if not instr(1, trim(actualval), trim(CompareValue)) > 0  then
                 call fnrecordresults ("OtherAgencyIncidents: ["&CompareValue&"]is not found in the list as expected", "pass","")
                else
                 call fnrecordresults ("OtherAgencyIncidents:  ["&actualval&"]is found which is unexpected ", "Fail","")               
               end if
           end if
       end if
       
        if detail1 = "CaseNumber" then
           actualval = IncidentDetailsDictObj1.item("CaseNumber")
           if lcase(ExistenceCheck) = "present" then
               call fncompareValues(actualval, CompareValue, "Case Number", "instring")     
            elseif lcase(ExistenceCheck) = "absent" then
               if not instr(1, trim(actualval), trim(CompareValue)) > 0  then
                 call fnrecordresults ("Case Number: ["&CompareValue&"]is not found in the list as expected", "pass","")
                else
                 call fnrecordresults ("Case Number:  ["&actualval&"]is found which is unexpected ", "Fail","")               
               end if
           end if
       end if
       
        if lcase(detail1) = "Primary units" then
        
          CompareValue = GetUnitAlias(CompareValue) 'assigned units column in incident queue is populating the unit alais 
           actualval = IncidentDetailsDictObj1.item("PrimaryUnits")
           Assignedunitlistarray = split (actualval, " ")
           found = 0 
           for k= 0 to ubound(Assignedunitlistarray)
               if  trim(lcase(Assignedunitlistarray(k)))= lcase(trim(CompareValue))   then
                    found = 1
                    exit for 
               end if 
           
           next 
           if lcase(ExistenceCheck) = "present" and found = 1  then
               call fnrecordresults ("Primary Unit is found in the list as expected", "pass","")  
           elseif lcase(ExistenceCheck) = "absent" and found = 1 then
                   call fnrecordresults ("Actual value ["&actualval&"]is found  which is unexpected ", "Fail","")
           elseif lcase(ExistenceCheck) = "present" and found = 0  then
               call fnrecordresults ("Primary Unit  "&CompareValue&" is not found in the list which is unexpected ", "Fail","")     
            elseif lcase(ExistenceCheck) = "absent" and found = 0 then              
                  call fnrecordresults ("Primary Unit "&CompareValue&" is not found in the list as expected", "pass","")
           end if
        
         end if 
         
         
        If detail1 = "CertificationType" then
           actualval = IncidentDetailsDictObj1.item("CertificationType")
           if lcase(ExistenceCheck) = "present" then
               call fncompareValues(actualval, CompareValue, "CertificationType value", "instring")     
            elseif lcase(ExistenceCheck) = "absent" then
               if not instr(1, trim(actualval), trim(CompareValue)) > 0  then
                 call fnrecordresults ("CertificationType vale: ["&CompareValue&"]is not found in the list as expected", "pass","")
                else
                 call fnrecordresults ("CertificationType vale:  ["&actualval&"]is found which is unexpected ", "Fail","")               
               end if
           end if
       end if 
       
end sub

'This function gets the Incident details of a given Incident ID, stores them in a dictionary object 
'and returns the dictionary object to calling function.
'More items can be added to the dictionary based on the requirements
'Parikshith 18/3/2014
Function GetIncidentRowDetails(byval IncidentID)   

    Aliases.WpfProcess.DNIncidentQueue.Setfocus 
    set objIncidentGridQ = GetGridObj("incidentqueue")
    
    if objIncidentGridQ is nothing Then
      call FnRecordResults ("Unable to generate incident grid object","Fail","")
      exit function 
    End IF 
    intRcount=objIncidentGridQ.ViewableRecords.Count

    Dim IncidentDetailsDictObj
    set IncidentDetailsDictObj = CreateObject("scripting.dictionary")
    
    strFields = ""
    for k = 0 to objIncidentGridQ.ViewableRecords.Item(0).Cells.count -1
      strFields = strFields + objIncidentGridQ.ViewableRecords.Item(0).Cells.Item(k).Field.Name.OleValue & ","
    next
    
    
    
    flag = 0
   For i=0 to intRcount-1             
      if trim(objIncidentGridQ.ViewableRecords.Item(i).Cells.Item(0).Value.ShortcutID.OleValue)=trim(IncidentID) Then
          set objCells = objIncidentGridQ.ViewableRecords.Item(i).Cells
           For k = 0 to objCells.Count - 1     
              If objCells.Item(k).Field.Name <> "" And Not objCells.Item(k).Value Is Nothing Then
                If objCells.Item(k).Field.Name = "AssignedUnits" Or objCells.Item(k).Field.Name = "AssignedUnitName" or objCells.Item(k).Field.Name = "QueueAssignedUnitsAlias" or objCells.Item(k).Field.Label = "AssignedUnits" THen
                    strUnitNames  = ""
                   
                    If objCells.Item(k).Value.AssignedUnits.Count > 0 Then
                      for Ucount = 0 to objCells.Item(k).Value.AssignedUnits.Count -1
                        strUnitNames = strUnitNames &" "& objCells.Item(k).Value.AssignedUnits.Item(Ucount).UnitAlias.OleValue
                      Next
                      IncidentDetailsDictObj.add Replace(objCells.Item(k).Field.Label," ",""), strUnitNames
                      
                    Else
                      IncidentDetailsDictObj.add Replace(objCells.Item(k).Field.Label," ",""), strUnitNames
                      
                    End If 
                ElseIf objCells.Item(k).Field.Name = "IncidentQueueIcons"  THen
                      strIcons  = ""
                    for Ucount = 0 to objCells.Item(k).Value.Count -1
                      strIcons = strIcons & objCells.Item(k).Value.Item(Ucount).IconURI.AbsoluteUri
                    Next
                    IncidentDetailsDictObj.add Replace(objCells.Item(k).Field.Label," ",""), strIcons
                      
                 ElseIf objCells.Item(k).Field.Name = "OtherAgencyUnits" Or objCells.Item(k).Field.Name ="OtherAgencyUnitsForIncident" Then
                   
                     strAssUnitNames  = ""
                     If objCells.Item(k).Value.OtherAgencyUnits.Count> 0 Then
                        for Ucount = 0 to objCells.Item(k).Value.OtherAgencyUnits.Count -1
                             strAssUnitNames = strAssUnitNames &" "& objCells.Item(k).Value.OtherAgencyUnits.Item(Ucount).UnitAlias.OleValue
                        Next
                        IncidentDetailsDictObj.add Replace(objCells.Item(k).Field.Label," ",""), strAssUnitNames
                         
                     Else
                        IncidentDetailsDictObj.add Replace(objCells.Item(k).Field.Label," ",""), strAssUnitNames  
                     End If 
                ElseIf Replace(objCells.Item(k).Field.Label," ","") = "IncidentTime" Then
                        IncidentDetailsDictObj.add Replace(objCells.Item(k).Field.Label," ",""), objCells.Item(k).Value.OleValue
                                         
                Else
                    IncidentDetailsDictObj.add Replace(objCells.Item(k).Field.Label," ",""), objCells.Item(k).Value.OleValue
                   
                End If
             
              End If
           Next 
            
           flag = 1
           Exit For
      End If     
    Next
    
    if flag =0 then
      call FnRecordResults (IncidentID&" not present in the incident queue","Fail","")
      exit function
    end if
    
    if flag then
         set GetIncidentRowDetails = IncidentDetailsDictObj
    end if
    
End Function

' Function Name: GetMaxIncidentIDAndAddToODT
' Parameters : 
' Details/Define : Gets max IncidentId from Incident queue and adds id,completeincidentid,masterincidentid to EctRecordCreationDetails ODT class 
' Author Name with Date: Venkat 21/03/2014
Sub GetMaxIncidentIDAndAddToODT()
    Set IncidentGridObj = GetGridObj("IncidentQueue")
    MaxIncidentID = 0
    If IncidentGridObj.Exists Then       
       IncidentsCount = IncidentGridObj.wRowCount  
       If IncidentsCount = 0 Then
          Call FnRecordResults("No incidents found","Fail","")
       Else
          For Index=0 to IncidentsCount-1           
             IncidentID = IncidentGridObj.ViewableRecords.Item(Index).DataItem.ShortcutID.OleValue
             If CInt(IncidentID) > CInt(MaxIncidentID) Then
                MaxIncidentID = IncidentID
             End If                           
          Next 
          MasterIncidentID = IncidentGridObj.ViewableRecords.Item(GetIncidentRowIdInIncidentQueue(MaxIncidentID)).DataItem.IncidentNumber.OleValue          
          project.Variables.ODTClass.EctRecordCreationDetails_IncidentID.AddItem(MaxIncidentID)
          CompleteIncidentID = FnGetMasterIdUsingMasterIncidentNmber(MasterIncidentID)
          project.Variables.ODTClass.EctRecordCreationDetails_CompleteIncidentID.AddItem(CompleteIncidentID)
          project.Variables.ODTClass.EctRecordCreationDetails_MasterIncidentString.AddItem(MasterIncidentID)          
       End If  
    Else
       Call FnRecordResults("Incident Grid object not found","Fail","")  
    End If  
    Set IncidentGridObj = Nothing
End Sub


' Function Name: CancelIncident
' Parameters : CancelReason,DispositionReason,Comment
' Details/Define : Clicks the cancel button from Incident expandded view and cancels the incident 
' Author Name with Date: Venkat 21/03/2014
Sub CancelIncident(byval IncidentID,byval CancelReason,byval DispositionReason,byval Comment)  
    Call MinMaxOrRestoreObjects("IncidentQueueWnd","Maximize")      
    Call ClickOnIncidentAndMoreMenuItems(IncidentID, "Cancel")           
    Call HandleCancelCallWnd(CancelReason,DispositionReason,Comment) 
 '   Call MinMaxOrRestoreObjects("IncidentQueueWnd","Restore")    
End Sub

Sub VerifyIncidentIDInIncidentQueue(byval IncidentID,byval IncidentExists)
  Delay(10000)
    Set GridObj = GetObject1("IncidentQueueGrid")
    If GridObj.Exists Then
       IncidentsCount = GridObj.ViewableRecords.Count
       IncidentMatch = False
       For index = 0 to IncidentsCount-1                                                                      
           If Trim(GridObj.ViewableRecords.Item(index).DataItem.ShortcutID.OleValue) = Trim(IncidentID) Then                    
              IncidentMatch = True
              Exit For
           End If            
       Next
       If IncidentExists Then
          If IncidentMatch Then
             Call FnRecordResults ("Incident [" & IncidentID & "] found", "Pass","")
          Else
             Call FnRecordResults ("Incident [" & IncidentID & "] not found", "Fail","")
          End If
       Else
          If IncidentMatch Then
             Call FnRecordResults ("Incident [" & IncidentID & "] found", "Fail","")
          Else
             Call FnRecordResults ("Incident [" & IncidentID & "] not found", "Pass","")
          End If  
       End If
    Else
       Call FnRecordResults ("Incident queue grid not found", "Fail","")  
    End If  
    Set GridObj = Nothing                      
End Sub

'VerifyRClickMenuItemInIncidentQueue
'Parameters : IncidentID,
'             ButtonName,
'             ButtonExists - 'TRUE' or 'FALSE'
'Details/Define : Right click on incident in incident queue and verifys the button exists or not 
'depending on the parameter ButtonExists verifys that should be present or not
'Parikshith
Sub VerifyRClickMenuItemInIncidentQueue(byval IncidentID,byval ButtonName, byval ButtonExists)
    If Aliases.WpfProcess.DNIncidentQueue.exists Then    
          Aliases.WpfProcess.DNIncidentQueue.activate 
      
          call BringRecordToFrontInGrid( "incidentqueue" ,IncidentID)
     
          IncidentCellObj = GetObjectAsString("IncidentIDCellInInicdentQueueDynamicString")
          set IncidentCellObj  = eval( replace(IncidentCellObj, "VarNumber", IncidentID))
      
          If IncidentCellObj.exists then      
                IncidentCellObj.ClickR()
                IncidentCellObj.ClickR()
          
                Set PopupObj = GetObject1("IncidentQueueContextMenu")          
                PropertyArr = Array("ClrClassName","Header")
                PropertyValuesArr = Array("XamMenuItem", "*" & ButtonName)
                If PopupObj.Exists Then
                       Set ButtonObj = PopupObj.FindChild(PropertyArr,PropertyValuesArr,2,True)
                     
                       If lcase(ButtonExists) = lcase(True) then           
                        if ButtonObj.exists then              
                             call FnRecordResults("Button [" & ButtonName & "] found", "Pass", "")
                         else
                             call FnRecordResults("Button [" & ButtonName & "] not found", "Fail", "")  
                        end if 
                       End If
               
                       If lcase(ButtonExists) = lcase(False) then             
                         if ButtonObj.IsEnabled = "False" then                  
                               call FnRecordResults("Button [" & ButtonName & "] is not found", "Pass", "")
                          else
                               call FnRecordResults("Button [" & ButtonName & "]  found", "Fail", "")  
                         end if 
                       End If                
                Else
                      Call FnRecordResults ("Object [" & IncidentQueueContextMenu & "] not found", "Fail","")   
                End If           
            else
              call FnRecordResults("Inicident ["&IncidentID&"] not found in the grid", "Fail", "")  
          End if
     Else 
         call FnRecordResults ("Incident Queue window not Found", "Fail","")   
   End if 
End  Sub



'to search the incident based on the details in the incident queue
Function AddIncidentSearchVal(byval SearchVal)
     indicator.Hide
    set incidentQueue = Aliases.WpfProcess.DNIncidentQueue
    if incidentQueue.exists Then 
      Aliases.WpfProcess.DNUnitQueue.Activate 
       'Alias = unitId       
       call clearAndsendKeys("IncidentQueueSearchTxtBoxObj", SearchVal) 
       delay 2000
      '  call BringRecordToFrontInGrid( "unitqueue" ,unitId)
    else 
        call FnRecordResults ("Incident Queue window not Found", "Fail","")
    end if 
    indicator.Show
end function


'This Function Clicks on the filter Icon of the column in the Incident Queue
'Author:Harsha
Function ClickOnFilterIconInIncidentQueueColumn(byval ColumnName,byval Text,byval ButtonToClick)
 
    set GridObj = Aliases.WpfProcess.DNIncidentQueue
    If GridObj.exists Then 
      Aliases.WpfProcess.IncidentQueue.Activate                 
    else 
        call FnRecordResults ("Incident Queue window not Found", "Fail","")
        Exit Function
    end if     
  
       Set ColumnObj = GridObj.FindChild(Array("ClrClassName","WPFControlText"),Array("LabelPresenter",ColumnName),20,True)
       If ColumnObj.Exists Then
          Call ColumnObj.Find("ClrClassName", "FilterButton", 10, false).Click()
       Else
          Call FnRecordResults("Column [" & ColumnName & "] not found","Fail","")
       End If
       
   If len(Text)> 0 Then
       Call SetText("IncidentQueueFilterTextBoxObj",Text)
   End If
   
   If ButtonToClick = "ClickFilter" Then
      Set PopUpRoot = Aliases.WpfProcess.WPFObject("HwndSource: PopupRoot", "").WPFObject("PopupRoot", "", 1)
      PopUpRoot.Focus  
      Set BtnClick = PopUpRoot.FindChild(Array("ClrClassName","WPFControlText"),Array("Button","Filter"),15,True)
      PopUpRoot.Focus 
      'Dealy(300)
      If BtnClick.Exists Then
         Sys.HighlightObject(BtnClick)
         BtnClick.click()
         Call ClickOnObjectIfExists("BtnClickFilter")
        Delay(300) 
       Else
        Call FnRecordResults("Button Click Filter not found","Fail","")
       End IF      
   Else
      Set PopUpRoot = Aliases.WpfProcess.WPFObject("HwndSource: PopupRoot", "").WPFObject("PopupRoot", "", 1)
      PopUpRoot.Focus  
      Set BtnClick = PopUpRoot.FindChild(Array("ClrClassName","WPFControlText"),Array("Button","Clear Filter"),15,True)
       BtnClick.SetFocus
       BtnClick.click()      
  End If
    Call ColumnObj.Find("ClrClassName", "FilterButton", 10, false).Click()
    Set GridObj = Nothing 
    Set ColumnObj = Nothing 
    Set PopUpRoot = Nothing
    set BtnClick = Nothing
    
End Function


Sub VerifyCancelCallWndFields()
    Set RespWndObj = GetLogicalObject("CancelIncidentWndResponseDispositionBox")
    call WaitTillObjExists(20000,RespWndObj)
    If RespWndObj.Exists Then  
       ' Set HeaderTxtBlock =  GetLogicalObject("CancelCallWndIncidentNumberTxtBlock") 
        If instr(1,lcase(RespWndObj.WPFControlText),lcase("Reason / Disposition")) >0 then        
          Call FnRecordResults("Given Master Incident String is matching with Cancel Call window Header String","Pass","")
        else       
          Call FnRecordResults("Given Master Incident String is not matching with Cancel Call window Header String","Fail","")
        End If 
        
        Set CancelReasonList =  GetLogicalObject("IncidentCancelReasonListbox")                 
        If CancelReasonList.HasItems Then     
          Call FnRecordResults("Cancel Reason List has items","Pass","")
        Else 
          Call FnRecordResults("Cancel Reason List does not has items","Fail","") 
        End If  
        
        
        Set DispositionList =  GetLogicalObject("CacelCallDispositionReasonObjInc")                 
        If DispositionList.HasItems Then
          Call FnRecordResults("Disposition Reason List has items","Pass","")
        Else
          Call FnRecordResults("Disposition Reason List does not has items","Fail","") 
        End If   
        
        call VerifyObjectProperty("CancelIncidentWndAuditTextBlock","Exists","True")
        call VerifyObjectProperty("IncidentCancelCommentTextbox","Exists","True")
        
        call VerifyObjectProperty("IncidentCancelIncidentBtn","Exists","True")
        call VerifyObjectProperty("CancelIncidentWndCancelBtn","Exists","True")      
    Else
       Call FnRecordResults("Cancel Incident Window not found","Fail","")
    End If         
    Set RespWndObj = Nothing   
    Set HeaderTxtBlock = Nothing
    Set CancelReasonList = Nothing
    Set DispositionList  = Nothing
End Sub

'Handles incident cancel window
'Parameters can be EMPTY or reasons can be entered
'Parikshith
Sub HandleCancelCallWnd(byval CancelReason,byval DispositionReason,byval Comment)
    Set RespWndObj = GetLogicalObject("CancelIncidentWndResponseDispositionBox")
    call WaitTillObjExists(20000,RespWndObj)
    'Set RespWndObj = GetLogicalObject("IncidentCancelResponseWnd")
    If RespWndObj.Exists Then              
       If CancelReason = "" Then
          Call ClickItem("IncidentCancelReasonListbox",0)
       Else
          set listobj = GetLogicalObject("IncidentCancelReasonListbox")
          set listitem = listObj.Findchild("WPFControlText",CancelReason,3,true)         
          listitem.Click          
       End If  
       
       If DispositionReason = "" Then
          Call ClickItem("CacelCallDispositionReasonObjInc",0)
       Else
          set listobj2 = GetLogicalObject("CacelCallDispositionReasonObjInc")
          set listitem2 = listObj2.Findchild("WPFControlText",DispositionReason,3,true)         
          listitem2.Click           
       End If
        
       If Comment <> "" Then 
          Call SetText("IncidentCancelCommentTextbox",Comment)
       End If
       Call ClickOnObject("IncidentCancelIncidentBtn")      
    Else
       Call FnRecordResults("Close incident window not found","Fail","")
    End If         
    Set RespWndObj = Nothing  
    set listobj = Nothing
    set listitem = Nothing
    set listobj2 = Nothing
    set listitem2 = Nothing
End Sub

'This Function Clicks on the filter Icon of the column in the Incident Queue
'Author:Harsha
Function ClickOnFilterIconInUnitQueueColumn(byval ColumnName,byval Text,byval ButtonToClick)
 
    set GridObj = Aliases.WpfProcess.DNUnitQueue
    If GridObj.exists Then 
      Aliases.WpfProcess.DNUnitQueue.Activate                 
    else 
        call FnRecordResults ("Unit Queue window not Found", "Fail","")
        Exit Function
    end if     
  
       Set ColumnObj = GridObj.FindChild(Array("ClrClassName","WPFControlText"),Array("LabelPresenter",ColumnName),20,True)
       If ColumnObj.Exists Then
          Call ColumnObj.Find("ClrClassName", "FilterButton", 10, false).Click()
       Else
          Call FnRecordResults("Column [" & ColumnName & "] not found","Fail","")
       End If
       
   If len(Text)> 0 Then
       Call SetText("IncidentQueueFilterTextBoxObj",Text)
   End If
   
   If ButtonToClick = "ClickFilter" Then
      Set PopUpRoot = Aliases.WpfProcess.WPFObject("HwndSource: PopupRoot", "").WPFObject("PopupRoot", "", 1)
      PopUpRoot.Focus  
      Set BtnClick = PopUpRoot.FindChild(Array("ClrClassName","WPFControlText"),Array("Button","Filter"),15,True)
       BtnClick.SetFocus
       BtnClick.click()
       Delay(300)       
   Else
      Set PopUpRoot = Aliases.WpfProcess.WPFObject("HwndSource: PopupRoot", "").WPFObject("PopupRoot", "", 1)
      PopUpRoot.Focus  
      Set BtnClick = PopUpRoot.FindChild(Array("ClrClassName","WPFControlText"),Array("Button","Clear Filter"),15,True)
       BtnClick.SetFocus
       BtnClick.click()      
  End If
    Call ColumnObj.Find("ClrClassName", "FilterButton", 10, false).Click()
    Set GridObj = Nothing 
    Set ColumnObj = Nothing 
    Set PopUpRoot = Nothing
    set BtnClick = Nothing
    
End Function

'Verifies the name of the new tab opened
Sub VerifyNewTabOpenedIncidentQueue(byval TabName)
    Dim IncidentCellObj
    If Aliases.WpfProcess.DNIncidentQueue.Exists Then 
          Aliases.WpfProcess.DNIncidentQueue.Activate    
          Aliases.WpfProcess.DNIncidentQueue.SetFocus    
          Sys.Refresh
          NameMapping.sys.Refresh            
          alltabs = Aliases.WpfProcess.DNIncidentQueue.findallchildren("ClrClassName","PaneTabItem",10,true)
          totaltabs  = ubound(alltabs)
           flag = 0
           
            IncidentCellObj = GetObjectAsString("IncidentTabDynamicStr")
            
              set IncidentCellObj  = eval( replace(IncidentCellObj, "varnumber", TabName))
               if lcase(IncidentCellObj.Header.OleValue) = lcase(TabName) then '"New Incident Tab 2"
                  log.message "New Tab Opened in Incident Queue:" &TabName                   
                  flag = 1                 
               end if            
           if flag = 1 then
             Call FnRecordResults("New tab found in incident queue","Pass","")
           else
             Call FnRecordResults("New tab not found in incident queue","Fail","")
           end if
     Else
       Call FnRecordResults ("Unit Queue window not found", "Fail","")
   End If        
End Sub

'method selects the record in the geo-locator window in R2L locaton window
Function SelectGeoRecordInRespondingSecondLocationDlgIncidentQueue()
 flag = 0 
  Call MinMaxOrRestoreObjects("IncidentQueueWnd","Maximize") 
  Set RespondingSecondlocationGeoGridObj = getobject1("RespondingSecondLoc_GeoLocatorGridObjInc")
  call WaitTillObjExists(12000, RespondingSecondlocationGeoGridObj)
    if RespondingSecondlocationGeoGridObj.exists then
         childObj = RespondingSecondlocationGeoGridObj.findallchildren  ("clrClassName", "GridViewRow", 5,true)
          For i=0 to ubound(childObj)  
                childObj(i).dblclick()
                flag = 1
                exit for
          next     
    else
       call FnRecordResults ("[Responding Second location] Geo Locator Object not found","Fail","")
    end If
    Call MinMaxOrRestoreObjects("IncidentQueueWnd","Restore")
    if  flag =0 Then
         call FnRecordResults ("[R2L] Geo had no records","Fail","")    
    end if 

End Function

 Function GetVisibleIncidentRowNumber( byval IncidentId)
  
  set  GridObj = GetGridObj("incidentqueue")
  allrows = GridObj.findallchildren("clrclassname","GridViewRow",5,true)
  Incidentrownumber  = ubound(allrows)-1 
  
  gridobjString = GetObjectAsString("IncidentDetailGridObjDynmaicString")
  GetVisibleIncidentRowObject = null 
   for k = 0 to Incidentrownumber +1
           if cint( trim(lcase(eval(replace(gridobjString, "VarNumber", k+1)).Item.ShortcutID.OleValue))) = cint( trim(lcase(IncidentId))) Then
                 ' a  = replace(gridobjString, "VarNumber", k)n
                  GetVisibleIncidentRowNumber =k
                  exit for
          end if 
    next
    
 End Function

 'this function written to handle the cancel call dialog 
'on clikcong on AV button in the incidentqueue
Function  HandleDispositionDialogIncidentQueue(byval reason)
    set listObj = GetLogicalObject("CacelCallDispositionReasonObjInc")
    if len(reason)> 1 then 
        set listitem = listObj.Findchild("WPFControlText",reason,13,true)
        if listitem.exists Then  
         listitem.child(0).set_ischecked(True)
        else 
            call FnRecordResults("Call disposition reason"&reason&"Not Found", "Fail","") 
            set listitem = listObj.Findchild("WPFControlText",".Entry Error",13,true)
           listitem.child(0).set_ischecked(True)
        
        end if 
        'listObj.clickitem(reason)
    else 
        set listitem = listObj.Findchild("WPFControlText",".Call Complete",13,true)
        if listitem.exists Then  
          listitem.child(0).set_ischecked(True)
        else 
            set listitem = listObj.Findchild("WPFControlText",".Entry Error",13,true)
          listitem.child(0).set_ischecked(True)
            
        end if 
        'listObj.clickitem(0)
    end if 
  
     call setText("IncidentQueueCancelCallCommentTxtObj", "Comments")
	  call sendKeys("IncidentQueueCancelCallCommentTxtObj", "[Tab]")
    call WaittillPropertyChange("CancelCallCloseBtnInc", "Visible", "True", 40000)
    call WaitForObject ("CancelCallCloseBtnInc", 10000)
    call ClickButton("CancelCallCloseBtnInc")


End Function



'verify the responding secondary location dialog and fields 
Function VerifyRespondingSecondLocFieldsIncidentQueue()
    set RespondingSecondLocObj = GetObject1("RespondingSecondLocDialogObjInc")
    call WaitTillObjExists(20000,RespondingSecondLocObj)
    set RespondingSecondLocObj = GetObject1("RespondingSecondLocDialogObjInc")
    If RespondingSecondLocObj.exists Then
        call FnRecordResults ("[Responding Second loc] Dialog  found ","Pass","")  
        Set FieldObj = GetObject1("RespondingSecondLoc_locationTextObjInc")
        call CheckObjectExistence(FieldObj, True, "R2LLocation location Text field ")   
        Set FieldObj = GetObject1("RespondingSecondLoc_addressTextObjInc") 
        call CheckObjectExistence(FieldObj, True, "R2LLocation address text field ")
        Set FieldObj = GetObject1("RespondingSecondLoc_apartmentTextObjInc") 
        call CheckObjectExistence(FieldObj, True, "R2LLocation apartment Text field ")
        Set FieldObj = GetObject1("RespondingSecondLoc_buildingTextObjInc")
        call CheckObjectExistence(FieldObj, True, "R2LLocation Building Text field ")
        Set FieldObj = GetObject1("RespondingSecondLoc_CityComboObjInc")       
        call CheckObjectExistence(FieldObj, True, "R2LLocation City Combo field ")
        Set FieldObj = GetObject1("RespondingSecondLoc_StateComboObjInc")           
        call CheckObjectExistence(FieldObj, True, "R2LLocation state combo field ")
         Set FieldObj = GetObject1("RespondingSecondLoc_ZipTextObjInc")     
        call CheckObjectExistence(FieldObj, True, "R2LLocation Zip text field ")
        Set FieldObj = GetObject1("RespondingSecondLoc_CommentTextObjInc")
        call CheckObjectExistence(FieldObj, True, "R2LLocation Comment text field ")  
    else
        call FnRecordResults ("[Responding Second loc] Dialog not found ","Fail","")   
    End If   
    
end Function


' Function expands incident and clicks on any Button present under more button
Sub ClickOnIncidentAndMoreMenuItems(byval IncidentID , byval ButtonName)
Set IncidentQueue = Aliases.WpfProcess.DNIncidentQueue
    If IncidentQueue.Exists Then 
       IncidentQueue.Activate 
       Call CollapseAllUnitsOrIncidents("incidentqueue")
       IncidentRow =  GetIncidentRowIdInIncidentQueue (IncidentID) 
       call CollapseOrExpandInIncidentQueue (IncidentID, "expand")
       'set IncidentGridObj = GetGridObj("incidentqueue") 
       'IncidentGridObj.ScrollIndexIntoView(IncidentRow)         
       Set GridObj = GetLogicalObject("IncidentMoreBtnClick")
       
                           
'          PVal = "WPFObject(" & chr(34) & "GridViewRow" & chr(34) & "," & chr(34) & chr(34) & "," & IncidentRow+1 & ")"                    
'          Set RowObj = GridObj.FindChild("Name",PVal,5,True) 
'            RowObj.SetFocus
'           Set CellObj = RowObj.FindChild(Array("uid","WPFControlText"),Array("menuItemShowMore","More"),5,True)         
          GridObj.Click
          
          Set PopupObj = GetLogicalObject("IncidentQueueContextMenu")          
          PropertyArr = Array("ClrClassName","WPFControlText")
          PropertyValuesArr = Array("MenuItem","*" &ButtonName)
          If PopupObj.Exists Then
             Set ButtonObj = PopupObj.FindChild(PropertyArr,PropertyValuesArr,10,True)
             If ButtonObj.Exists Then
                ButtonObj.Click
             Else
                Call FnRecordResults ("Button [" & ButtonName & "] not found", "Fail","")
             End If
          Else
             Call FnRecordResults ("Object [" & IncidentQueueContextMenu & "] not found", "Fail","")   
          End If            
      
    Else 
       Call FnRecordResults ("Incident Queue window not found", "Fail","")   
    End If 
    Set IncidentQueue = Nothing
    Set GridObj = Nothing
    Set RowObj = Nothing 
    Set PopupObj = Nothing 
Delay(8000)
End Sub



'function adds the incident comment in incident queue for an incident
Function AddIncidentCommentinIncidentQueue(byval incidentid, byval comment)

   
     visibleRowid = GetIncidentRowIdInIncidentQueue(incidentid)
    if IsNull ( incidentrownumber) then
        call FnRecordResults("Incident not found in the Incidents Queue to add incident comment" ,"Fail", "")
        exit function
    end if 
    a= GetObjectAsString("IncidentQueueCommentsTabDynamicString")
    a = replace(a, "VarNumber", visibleRowid+1)
    set obj = CustomEvaluate(a,3000,500)
    if Obj.Exists then
        Obj.click()
    end if    
     
    a =GetObjectAsString("IncidentQueueCommentsTextDynamicString")
    a = replace(a, "VarNumber", visibleRowid+1)
    set obj = CustomEvaluate(a,3000,500)
    if Obj.Exists then
        Obj.settext comment
		Obj.Keys "[Tab]"
        a =GetObjectAsString("IncidentQueueSaveBtnDynamicString")
        a = replace(a, "VarNumber", visibleRowid+1)
        set obj = CustomEvaluate(a,3000,500)
        call WaittillPropertyChange (obj,"Enabled", True, 5000)
        obj.click()
    else 
       call FnRecordResults("[IncidentQueueCommentsTextDynamicString] object not found unable to set the comment  for an incident" ,"Fail", "")
        exit function
    end if  
 

end function



' Parameters : UnitId,ButtonName and incidentid
' Details/Define : selects unit in inicdent and clicks on on the speceified button
 
Function SelectUnitInIncidentQueueAndClickOnButton(byval UnitId,byval ButtonName,byval IncidentID)

   If Aliases.WpfProcess.DNIncidentQueue.Exists Then    
       Aliases.WpfProcess.DNIncidentQueue.Activate    
      
       
      
      Call CollapseOrExpandInIncidentQueue(IncidentID,"expand")
        
      IncidentRow = GetIncidentRowIdInIncidentQueue(IncidentID) 
       
          
        Set UnitGridObj = GetLogicalObject("UnitHeaderTabInIncidentQueue")
        UnitGridObj.Click()
        set UnitincidentsGridObj =  Aliases.WpfProcess.DNIncidentQueue.FindChild("uid","igDataGridMain",15,True).FindChild("ClrClassName","TabControl",10,true).FindChild(array("ClrClassName", "Visible"),array("ListBox","true"),10,true)
          IDcount = UnitincidentsGridObj.wItemCount
          flag = 0
          for k=0 to IDcount-1
            if lcase(trim(UnitincidentsGridObj.Items.Item(k).UnitForIncidentQueue.UnitCode.OleValue))= lcase(trim(UnitId)) Then
              IncidentUnitIDObj = GetObjectAsString("UnitIDIncidentQueueDynamicStr")
              set IncidentUnitIDObj  = eval( replace(IncidentUnitIDObj, "VarNum", k+1))
              IncidentUnitIDObj.Click()                                                
              flag = 1
              exit for
            end if
          next                     
           If flag=0 Then
             Call FnRecordResults("Unit [" & UnitId & "] not found in units tab of incident", "Fail","")
             Set UnitincidentsGridObj = Nothing
             Set UnitGridObj = Nothing
             Exit Function
           End If 
            IncidentUnitBtnObj = GetObjectAsString("UnitButnInIncidentQueueDynamicStr")
            set IncidentUnitBtnObj  = eval( replace(IncidentUnitBtnObj, "VarButton", ButtonName))
            IncidentUnitBtnObj.Click()          
       Else       
        Call FnRecordResults("Incident Queue window not Found", "Fail","") 
         
    End If
    Set UnitincidentsGridObj = Nothing
    Set UnitGridObj = Nothing 
        
End Function


'selects unit in a incident queue 
'Thsi is required when an multiple units assigned to single incidents  
'to select the specific unit
 
Function SelectAnUnitInIncidentQueue(byval UnitId, byval IncidentId)
SelectAnUnitInIncidentQueue = False
	listItems = GetArrayofObject1("IncidentQueueUnitGridListItemsArrayObj")
	for i=0 to ubound(listItems) 
	   ColumnIndex = listItems(i).FindChild("SharedSizeGroup", "UnitCodeColumn",5, true).WPFControlIndex					
	   if trim(lcase(UnitId)) = trim(lcase(listItems(i).FindChild(Array("ClrClassName","WPFControlOrdinalNo") ,Array("TextBlock", ColumnIndex),2, true).wpfcontrolText )) Then
    		listItems(i).Click
    		SelectAnUnitInIncidentQueue = True		
    		Exit For 	
	   End If 			
	next
End Function

 
'click on button in incident queue
'parameter button name and incident id
'prerequisites - in case the mutipleunits assigned to same incident the the correct unit should have been selected by default


 Function ClickOnButtonInIncidentQueue(byval ButtonNAme, byval IncidentID )
  'call CollapseOrExpandInUnitQueue(UnitId , "expand")
  
          unitrownumber = GetIncidentRowIdInIncidentQueue(IncidentID)   
    if IsNull (unitrownumber) then
        call FnRecordResults("Incident not found in the unit Queue not able to click on button" ,"Fail", "")
        exit function
    end if     
           
          
           a =GetObjectAsString("incidentqueueDynamicButtonObjVarString")
       
       ab = a 
      ' visibleRowid = GetVisibleUnitRowNumber(IncidentID)
       a = replace(ab, "btnname", ucase(ButtonNAme) )
       log.Message a
       sys.Refresh
       set obj = CustomEvaluate(a,100000,500)
       
       call WaittillPropertyChange(obj,"Visible", "True", 20000)
       set obj = CustomEvaluate(a,100000,500)
        if obj.exists then
            
          
            if obj.visible = True Then 
                obj.click()
                call FnRecordResults("Button ["&ButtonNAme&"] found and clicking on it", "Pass", "")
            else
                call FnRecordResults("Button ["&ButtonNAme&"]is not visible", "Fail", "")
            end if 
          
      else
        call FnRecordResults("Button ["&ButtonNAme&"] not found for the unit", "Fail", "")  
      end if
       
 end Function
 
 
'method selects the record in the geo-locator window in R2L locaton window
Function SelectGeoRecordInSecondaryLocFrameOfIncidentQueue()
  flag = 0 
  Set RespondingSecondlocationGeoGridObj = getobject1("IncidentRespondingSecondLoc_GeoLocatorGridObj")
  call WaitTillObjExists(12000, RespondingSecondlocationGeoGridObj)
  if RespondingSecondlocationGeoGridObj.exists then
      childObj = RespondingSecondlocationGeoGridObj.findallchildren  ("clrClassName", "GridViewRow", 5,true)
      For i=0 to ubound(childObj)  
        childObj(i).dblclick()
      flag = 1
      exit for
      next   
  else
      call FnRecordResults ("Incident [Responding Second location] Geo Locator Object not found","Fail","")
  end If
  if  flag =0 Then
    call FnRecordResults (" Geo had no records in indient Queue of Responding location","Fail","")    
  end if 
 
End Function
 

 
'this function is used for creating the responding secondary location of D2L,R2l and A2l -(common logic for all 3 responding types
'Respondingtype - D2l,R2l and A2l should be passed  
'from  incident queue 
Function CreateRespondingSecondaryLocFromIncidentQueue(byval Respondingtype, byval locationName, byval address, byval apartment, byval state, byval building, byval zip, byval comment)
  
    set RespondingSecondLocObj = GetObject1("RespondingSecondLocDialogObjInc")
    If RespondingSecondLocObj.exists Then
        call FnRecordResults (" Creating record for ["&Respondingtype&"]","Pass","")  
        Call MinMaxOrRestoreObjects("IncidentQueueWnd","Maximize")
        if len(trim(address)) > 1 Then         
            call SetTextwithTrigger ("RespondingSecondLoc_addressTextObjInc", address , "[Tab]")
            call SelectGeoRecordInSecondaryLocFrameOfIncidentQueue()
        end if 							
            
        
        if len(trim(comment)) > 1 Then         
            call SetTextBoxValue("RespondingSecondLoc_CommentTextObjInc","testing R2l comments")
        end if 
    		sys.Refresh
        call WaittillPropertyChange		("IncidentQueueRespondingSecondLoc_okBttnObj", "Exists", "True", 50000)	
        call ClickButton("IncidentQueueRespondingSecondLoc_okBttnObj")
        Call MinMaxOrRestoreObjects("IncidentQueueWnd","Restore")

    else 
         call FnRecordResults ("["&Respondingtype&" ] panel not found in [Incident Queue]","Fail","")   
    end if 

End function


'this function is used for creating the responding secondary location of D2L,R2l and A2l -(common logic for all 3 responding types
'in Workspace
'Author :Preethi
Function CreateRespondingSecondaryLocFromWorkSpace(byval Respondingtype, byval locationName, byval address, byval Odometervalue, byval state, byval building, byval zip, byval comment)

  Set RespondingSecondLocObj = GetObject1("WorkSpaceTabObject")
  If RespondingSecondLocObj.exists Then
        call FnRecordResults (" Creating record for ["&Respondingtype&"]","Pass","")  
     
        if len(trim(address)) > 1 Then         
            call SetTextwithTrigger ("WorkSpaceSecLocAddressTextObj", address , "[Tab]")
            call SetTextwithTrigger ("WorkSpaceSecLocAddressTextObj", address , "[Tab]")
            call SelectGeoRecordInRespondingSecondLocationDlg()
        end if 							
            
        
        if len(trim(comment)) > 1 Then         
            call SetTextBoxValue("WorkSpaceCommentTextObj",comment)
        end if 
        
        if len(trim(Odometervalue))> 1 Then
            call SetTextBoxValue("WorkSpaceOdometerTextObj",Odometervalue)  
        else
            if GetObject1("WorkSpaceOdometerTextObj").exists then
                call SetTextBoxValue("WorkSpaceOdometerTextObj","324.32")  
            end if  
      
        end if 
        
        
    		sys.Refresh
        call WaittillPropertyChange		("RespondingSecondLoc_okBttnObj", "Exists", "True", 50000)	
        call ClickButton("RespondingSecondLoc_okBttnObj")
        

    else 
         call FnRecordResults ("["&Respondingtype&" ] panel not found in [WorkSpace]","Fail","")   
    end if 
End Function


'This Function Selects the Address in the geo locator of the work space window 
'Author:Preethi
Function SelectGeoRecordInSecondaryLocFrameOfWorkSpace()
  flag = 0 
  Set RespondingSecondlocationGeoGridObj = getobject1("WorkSpaceGeoLocatorGridObj")
  call WaitTillObjExists(12000, RespondingSecondlocationGeoGridObj)
  if RespondingSecondlocationGeoGridObj.exists then
      childObj = RespondingSecondlocationGeoGridObj.findallchildren("clrClassName", "GridViewRow", 25,true)
      For i=0 to ubound(childObj)  
        childObj(i).dblclick()
        flag = 1
        exit for
      next   
  else
      call FnRecordResults ("Incident [Responding Second location] Geo Locator Object not found","Fail","")
  end If
  if  flag =0 Then
      call FnRecordResults (" Geo had no records in indient Queue of Responding location","Fail","")    
  end if 
 
End Function


Sub VerifyPresenceOrAbsenceOfIncidentInIncidentQueue(byval IncidentID,byval PresenceOrAbsence)
Delay(5000)
    visibleRowid = -1
    Set GridObj = GetObject1("IncidentQueueGrid")
    If GridObj.Exists Then
       IncidentsCount = GridObj.ViewableRecords.Count
       IncidentMatch = False
       For index = 0 to IncidentsCount-1                                                                      
           If Trim(GridObj.ViewableRecords.Item(index).DataItem.ShortcutID.OleValue) = Trim(IncidentID) Then                    
              visibleRowid = index
              Exit For
           End If            
       Next
    Else
       Call FnRecordResults ("Incident queue grid not found", "Fail","")  
    End If   
      
    'if  Not IsNull( visibleRowid) and lcase(PresenceOrAbsence) = "present" then
    if  (visibleRowid <> -1) and lcase(PresenceOrAbsence) = "present" then
        call FnRecordResults("Incident [" &IncidentID& "]  found in the Incidents Queue " ,"Pass", "")
    'Else If IsNull( visibleRowid) and lcase(PresenceOrAbsence) = "absent" then
    Else If (visibleRowid = -1) and lcase(PresenceOrAbsence) = "absent" then
      call FnRecordResults("Incident [" &IncidentID& "]  Not found in the Incidents Queue " ,"Pass", "")
    Else 
      call FnRecordResults("Incident [" &IncidentID& "]  Not" &PresenceOrAbsence& " in the Incidents Queue " ,"Fail", "")
    End If
    End If
End Sub
 
'function verifies the assigned units column in incident queue.
'it will verify through UI
'since the primary units are enclosed with square brackets 
Function VerifyAssignedUnitsThorughUI(byval IncidentID, byval CompareValue )

    Aliases.WpfProcess.DNIncidentQueue.Setfocus 
    set objIncidentGridQ = GetGridObj("incidentqueue")
    CompareValue = Replace(CompareValue,"[","")
    CompareValue = Replace(CompareValue,"]","")
    if objIncidentGridQ is nothing Then
      call FnRecordResults ("Unable to generate incident grid object","Fail","")
      exit function 
    End IF 
    intRcount=objIncidentGridQ.ViewableRecords.Count

    Dim IncidentDetailsDictObj
    set IncidentDetailsDictObj = CreateObject("scripting.dictionary")
    
    strFields = ""
    for k = 0 to objIncidentGridQ.ViewableRecords.Item(0).Cells.count -1
      strFields = strFields + objIncidentGridQ.ViewableRecords.Item(0).Cells.Item(k).Field.Name.OleValue & ","
    next   
    
    
    flag = 0
   For i=0 to intRcount-1             
      if trim(objIncidentGridQ.ViewableRecords.Item(i).Cells.Item(0).Value.ShortcutID.OleValue)=trim(IncidentID) Then
          set objCells = objIncidentGridQ.ViewableRecords.Item(i).Cells
           For k = 0 to objCells.Count - 1     
              If objCells.Item(k).Field.Name <> "" And Not objCells.Item(k).Value Is Nothing Then
                'If objCells.Item(k).Field.Name = "AssignedUnits" Then
                If objCells.Item(k).Field.Name = "QueueAssignedUnitsAlias" Then
                    strUnitNames  = ""
                    for Ucount = 0 to objCells.Item(k).Value.AssignedUnits.Count -1
                      strUnitNames = strUnitNames &" "& objCells.Item(k).Value.AssignedUnits.Item(Ucount).UnitAlias.OleValue
                    Next
                 End If
                End If
           Next 
            
           flag = 1
           Exit For
      End If     
    Next
    
    if flag =0 then
      call FnRecordResults (IncidentID&" not present in the incident queue","Fail","")
      exit function
    end if     
     
           actualval = strUnitNames
           Assignedunitlistarray = split (actualval, " ")
           found = 0 
           for k= 0 to ubound(Assignedunitlistarray)
               If  instr(trim(Assignedunitlistarray(k)), trim(CompareValue)) > 0 Then               
                    found = 1
                    exit for 
               end if 
           
           next 
           If  found = 1  then
               call fnrecordresults ("Assigned Unit is found in the list as expected", "pass","")  
            elseif found = 0  then
                 call fnrecordresults ("Assigned Unit  "&CompareValue&" is not found in the list which is unexpected ", "Fail","")     
            End if
End Function 



' Function Name: ClickOnIncidentMoreBtnAndVerifyMenuItemsProperty
' Parameters : IncidentID,MenuItemName,PropertyToBeVerified,ExpectedPropertyVal
' Details/Define : clicks on Incident More Button and verifes the given property value for a given Menu Item Present in Pop up window
' Author Name with Date: Manjunath 18/08/2015
Sub ClickOnIncidentMoreBtnAndVerifyMenuItemsProperty(byval IncidentID,byval MenuItemName, byval PropertyToBeVerified, byval ExpectedPropertyVal)
Set IncidentQueue = Aliases.WpfProcess.DNIncidentQueue
    If IncidentQueue.Exists Then 
       IncidentQueue.Activate 
       Call CollapseAllUnitsOrIncidents("incidentqueue")
       IncidentRow =  GetIncidentRowIdInIncidentQueue (IncidentID) 
       If IsNumeric(IncidentRow) Then
         call CollapseOrExpandInIncidentQueue (IncidentID, "expand")
         'set IncidentGridObj = GetGridObj("incidentqueue") 
         'IncidentGridObj.ScrollIndexIntoView(IncidentRow)         
          Set GridObj = GetLogicalObject("IncidentMoreBtnClick")
                           
'            PVal = "WPFObject(" & chr(34) & "GridViewRow" & chr(34) & "," & chr(34) & chr(34) & "," & IncidentRow+1 & ")"                    
'            Set RowObj = GridObj.FindChild("Name",PVal,5,True) 
'              RowObj.SetFocus
'             Set CellObj = RowObj.FindChild(Array("uid","WPFControlText"),Array("menuItemShowMore","More"),5,True)         
            GridObj.Click
          
            Set PopupObj = GetLogicalObject("IncidentQueueContextMenu")          
            PropertyArr = Array("ClrClassName","WPFControlText")
            PropertyValuesArr = Array("MenuItem","*" &MenuItemName)
            If PopupObj.Exists Then
               Set ButtonObj = PopupObj.FindChild(PropertyArr,PropertyValuesArr,10,True)
                      
               ActualPropertyVal =  aqObject.GetPropertyValue(ButtonObj,PropertyToBeVerified)
            
               If lcase(ActualPropertyVal) = lcase(ExpectedPropertyVal) Then
                  Call FnRecordResults("Menu Item ["&MenuItemName&"] Actual Value [" &ActualPropertyVal & "]of [" & PropertyToBeVerified & "]Property is Maching with Expected value [" & ExpectedPropertyVal& "]" ,"Pass","")
               Else
                  Call FnRecordResults("Menu Item ["&MenuItemName&"] Actual Value [" &ActualPropertyVal & "]of [" & PropertyToBeVerified & "]Property is Not Maching with Expected value [" & ExpectedPropertyVal& "]" ,"Fail","")
               End If
            Else
               Call FnRecordResults ("Object [" & IncidentQueueContextMenu & "] not found", "Fail","")   
            End If            
       Else
          Call FnRecordResults ("IncidentID [" & IncidentID & "] not found", "Fail","")             
       End If
    Else 
       Call FnRecordResults ("Incident Queue window not found", "Fail","")   
    End If 
    
    Set IncidentQueue = Nothing
    Set GridObj = Nothing
    Set RowObj = Nothing 
    Set PopupObj = Nothing 
Delay(8000)
End Sub


' Function Name: RClickOnIncidentAndVerifyMenuItemsProperty
' Parameters : IncidentID,MenuItemName,PropertyToBeVerified,ExpectedPropertyVal
' Details/Define : Right clicks on Incident and verifes the given property value for a given Menu Item Present in Pop up window
' Author Name with Date: Sunil 14/09/2015
sub RClickOnIncidentAndVerifyMenuItemsProperty(byVal IncidentID,byVal MenuItemName,byval PropertyToBeVerified, byval ExpectedPropertyVal)
   If Aliases.WpfProcess.DNIncidentQueue.exists Then    
          Aliases.WpfProcess.DNIncidentQueue.activate 
      
          call BringRecordToFrontInGrid( "incidentqueue" ,IncidentID)
     
          IncidentCellObj = GetObjectAsString("IncidentIDCellInInicdentQueueDynamicString")
          set IncidentCellObj  = eval( replace(IncidentCellObj, "VarNumber", IncidentID))
      
          If IncidentCellObj.exists then      
                IncidentCellObj.ClickR()
                IncidentCellObj.ClickR()
          
                Set ContextMenuPopupObj = GetObject1("IncidentQueueContextMenu")          
                PropertyArr = Array("ClrClassName","Header")
                PropertyValuesArr = Array("XamMenuItem", "*" & MenuItemName)
                If ContextMenuPopupObj.Exists Then
                     Set ContextMenuItemObj = ContextMenuPopupObj.FindChild(PropertyArr,PropertyValuesArr,15,True)
                     If ContextMenuItemObj.Exists Then
                        ActualPropertyVal =  aqObject.GetPropertyValue(ContextMenuItemObj,PropertyToBeVerified)
                        If lcase(ActualPropertyVal) = lcase(ExpectedPropertyVal) Then
                            Call FnRecordResults("Menu Item ["&MenuItemName&"] Actual Value [" &ActualPropertyVal & "]of [" & PropertyToBeVerified & "]Property is Maching with Expected value [" & ExpectedPropertyVal& "]" ,"Pass","")
                        Else
                            Call FnRecordResults("Menu Item ["&MenuItemName&"] Actual Value [" &ActualPropertyVal & "]of [" & PropertyToBeVerified & "]Property is Not Maching with Expected value [" & ExpectedPropertyVal& "]" ,"Fail","")
                        End If
                     Else
                        Call FnRecordResults ("Menu Item [" & MenuItemName & "] not found", "Fail","")
                     End If
                Else
                   Call FnRecordResults ("Object [" & IncidentQueueContextMenu & "] not found", "Fail","")   
                End If           
            else
              call FnRecordResults("Inicident ["&IncidentID&"] not found in the grid", "Fail", "")  
          End if
     Else 
         call FnRecordResults ("Incident Queue window not Found", "Fail","")   
   End if      
end sub


' Function Name: AddTabInincidentqueue
' Parameters : TabID
' Details/Define : This function is to create the new tab in the incident queue
' Author Name with Date: Sunil 19/11/2015
Function AddTabInincidentqueue(TabID)
  PtyVal="New Incident Tab "&TabID
 set tabobj = Aliases.WpfProcess.DNIncidentQueue.Find("ClrClassName","TabGroupPane",25,true)
  set objLastTab = tabObj.Find(array("ClrClassName","WPFControlOrdinalNo"),array("PaneTabItem", tabobj.Items.Count),10, true)
  call tabobj.click((objLastTab.left + objLastTab.width + 10), 8)

  If tabObj.Items.Item(tabObj.Items.Count -1).WPFControlText =  "New Incident Tab " & TabID Then
    Call FnRecordResults("New Tab["&TabID&"]in Incident Queue is Added","pass","")
  Else
    Call FnRecordResults("New Tab["&TabID&"]in Incident Queue is Not Added","Fail","")  
  End IF 

End Function


' Function Name: CloseTabInincidentqueue
' Parameters : TabID
' Details/Define : This function is to delete the tab in the incident queue
' Author Name with Date: Sunil 19/11/2015
Function CloseTabInincidentqueue(TabID)

  PtyVal="New Incident Tab "&TabID
  set tabobj = Aliases.WpfProcess.DNIncidentQueue.Find("ClrClassName","TabGroupPane",25,true)
  set objTabItem = tabObj.Find(array("ClrClassName","WPFControlText"),array("PaneTabItem", PtyVal),10, true)
  If objTabITem.Exists = True Then 
'    call objTabITem.Click(objTabITem.Width - 8, objTabITem.Height /2)
    objTabITem.ClickR
    Set MenuItemObj = Aliases.WpfProcess.HwndSource_PopupRoot.WPFObject("PopupRoot", "", 1).WPFObject("Decorator", "", 1).WPFObject("NonLogicalAdornerDecorator", "", 1).WPFObject("ContextMenu", "", 1)
    MenuItemObj.ClickItem("Close")
    Call FnRecordResults("Tab["&TabID&"]in Incident Queue is Deleted Successfuly","pass","")
  Else
    Call FnRecordResults("Tab["&TabID&"]in Incident Queue is Found and hence Not Deleted","Fail","")
  End IF  

End Function



' Function Name: VerifyIncidentColumnValueIsBlank
' Parameters : IncidentID,ColumnName
' Details/Define :This function is to verift the incident queue column value should be blank
' Author Name with Date: Sunil 24/12/2015
Function VerifyIncidentColumnValueIsBlank(IncidentID,ColumnName)
  Dim IncidentDetailsDictObj1
  set IncidentDetailsDictObj1 = CreateObject("scripting.dictionary")
  set IncidentDetailsDictObj1 = GetIncidentRowDetails(IncidentID)
    

 if lcase(ColumnName) = "incident number" then
           actualval = IncidentDetailsDictObj1.item("MasterIncNumber")
           If Len(actualval)=0 then
              call fnrecordresults ("value of column ["&ColumnName&"]is blank as expected", "pass","")
           else
             call fnrecordresults ("value of column ["&ColumnName&"]is not blank as expected", "fail","")  
           End if 
 
  end if 
  if lcase(ColumnName) = "sector" then
           actualval = IncidentDetailsDictObj1.item("Sector")
           If Len(actualval)=0 then
              call fnrecordresults ("value of column ["&ColumnName&"]is blank as expected", "pass","")
           else
             call fnrecordresults ("value of column ["&ColumnName&"]is not blank as expected", "fail","")  
           End if 
 
  end if 
  
  set IncidentDetailsDictObj1=nothing
End function


Function VerifyFilterSearchValue(byval expectedcaseNumberString)
    Aliases.WpfProcess.DNIncidentQueue.Setfocus 
    set objIncidentGridQ = GetGridObj("incidentqueue")
    
    if objIncidentGridQ is nothing Then
      call FnRecordResults ("Unable to generate incident grid object","Fail","")
      exit function 
    End IF 
    intRcount=objIncidentGridQ.Items.Count  

    Dim IncidentDetailsDictObj
    set IncidentDetailsDictObj = CreateObject("scripting.dictionary")
    
    flag = 0
    For i= 0 to intRcount - 1          
     
     if instr(trim(objIncidentGridQ.Items.Item(i).CaseNumber.OleValue) , trim(expectedcaseNumberString)) > 0  Then
        call fnrecordresults ("The case number displayed in the column is expected", "pass","")
     Else
        call fnrecordresults ("The case number displayed in the column is NOT expected", "pass","")
     End IF
              
    next
End Function

' Function expands incident and clicks on any Button present under more button
Sub VerifyIncidentAndMoreMenuItems(byval IncidentID , byval ButtonName)

    Set IncidentQueue = Aliases.WpfProcess.DNIncidentQueue
    If IncidentQueue.Exists Then 
       IncidentQueue.Activate 
       Call CollapseAllUnitsOrIncidents("incidentqueue")
       IncidentRow =  GetIncidentRowIdInIncidentQueue (IncidentID) 
        If IsNumeric(IncidentRow) Then
        Else
          Call FnRecordResults ("IncidentID [" & IncidentID & "] not found", "Fail","")  
          Exit Sub
        End If 
       call CollapseOrExpandInIncidentQueue (IncidentID, "expand")
               
       Set GridObj = GetLogicalObject("IncidentMoreBtnClick")
       GridObj.Click
          
          Set PopupObj = GetObject1("IncidentQueueContextMenu")          
          PropertyArr = Array("ClrClassName","WPFControlText")
          PropertyValuesArr = Array("MenuItem","*" &ButtonName)
          If PopupObj.Exists Then
              Call FnRecordResults ("Button [" & ButtonName & "]  found", "Pass","")
          Else
                Call FnRecordResults ("Button [" & ButtonName & "] not found", "Fail","")
          End If             
      
    Else 
       Call FnRecordResults ("Incident Queue window not found", "Fail","")   
    End If 
    Set IncidentQueue = Nothing
    Set GridObj = Nothing
    Set RowObj = Nothing 
    Set PopupObj = Nothing 
Delay(8000)
End Sub


Function VerifyPrimaryUnitInAssignedUnitColumn(byval param1,byval param2,byval param3,byval IncidentId)

string1 = param1 & param2 & param3

Call VerifyAssignedUnitsThorughUI(IncidentId,string1)

End Function

'This function verifies the ETA Column value
'Preethi
Function VerifyETAColumnValueIsAbsent( byval UnitId,byval ETA)
     On error resume next
     Call ApplyDelay(6000)
     unitDetails = GetUnitRowDetails(UnitId)
    
    If ETA = "absence"  Then 
        If(unitDetails(12) = "") Then
          call fnrecordresults ("ETA value is EMPTY as expected  "&unitID, "Pass","") 
        Else
          call fnrecordresults ("ETA value is EMPTY as expected  "&unitID, "Fail","")
        End If    
    End If 
    
    If ETA = "presence"  Then 
        If(unitDetails(12) = "") Then
          call fnrecordresults ("ETA value is EMPTY which is NOT  expected  "&unitID, "Fail","") 
        Else
          call fnrecordresults ("ETA column has value "&unitID, "Pass","")
        End If    
    End If 
    
    
 End function
